openapi: "3.0.0"
info:
  title: "silksatinbyjune-server"
  version: "0.1.0"
  description: "E-commerce web application for nightware apparell brand and documented with Swagger"
  license:
    name: "ISC"
    url: "https://spdx.org/licenses/MIT.html"
  contact:
    name: "Prince Akpabio"
    url: "https://apabioprince.netlify.app"
    email: "princeakpabio90@gmail.com"
servers:
  - url: "https://silksatinbyjune-server-api-dev.herokuapp.com/"
  - url: "http://localhost:4000/"
paths:
  /product/add:
    post:
      tags:
        - "Products"
      summary: "Add new product to a category."
      description: "Add new product to a category."
      responses:
        200:
          description: "Successfully added new product to the category."
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "name"
              properties:
                name:
                  type: "string"
                category_id:
                  type: "integer"
                image:
                  type: "string"
                price:
                  type: "integer"
                size:
                  type: "integer"
                color:
                  type: "string"
                size_unit:
                  type: "string"
                description:
                  type: "string"
                status:
                  type: "integer"
                time_in:
                  type: "string"
                date_in:
                  type: "string"
                date_updated:
                  type: "string"
  /product/list:
    get:
      tags:
        - "Products"
      summary: "Get all products in system"
      parameters:
        - name: "id"
          in: "query"
          description: "This is the product id of the category we are fetching from a database. This is for multi-category use case."
          schema:
            type: "integer"
        - name: "category_id"
          in: "query"
          description: "This is the product name of the category we are fetching from a database. This is for multi-category use case."
          schema:
            type: "string"
        - name: "count"
          in: "query"
          description: "This returns the number of products you set in the count field"
          schema:
            type: "integer"
        - name: "last_item_id"
          in: "query"
          description: "Returns an array of data with less than the last row id passed. If not passed, it defaults to zero"
          schema:
            type: "integer"
        - name: "select_all"
          in: "query"
          description: "This is returns all products assigned to the database."
          schema:
            type: "integer"
      responses:
        200:
          description: "Successfully fetched all products from database"
        400:
          description: "Could not fetch products from db, check your parameter values"
  /product/item/id:
    get:
      tags:
        - "Products"
      summary: "Get single product from category."
      responses:
        200:
          description: "Successfully retrieved single product."
      parameters:
        - name: "id"
          in: "query"
          description: "This is the product-id of the product we are fetching from a category. This is for multi-products use case."
          schema:
            type: "integer"
  /product/delete/id:
    post:
      tags:
        - "Products"
      summary: "Delete a product from the product list."
      description: "Delete a product from the product list."
      responses:
        200:
          description: "Successfully delete product."
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
  /product/update:
    post:
      tags:
        - "Products"
      summary: "Update product in the product list."
      description: "Update product in the product list."
      responses:
        200:
          description: "Successfully updated product."
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
                name:
                  type: "string"
                category_id:
                  type: "integer"
                image:
                  type: "string"
                price:
                  type: "integer"
                size:
                  type: "integer"
                color:
                  type: "string"
                size_unit:
                  type: "string"
                description:
                  type: "string"
  /product/add-category:
    post:
      tags:
        - "Products"
      summary: "Add new category for products."
      description: "Add new category for products."
      responses:
        200:
          description: "Successfully added new category."
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              required:
                - "name"
              properties:
                name:
                  type: "string"
  /product/delete-category:
    post:
      tags:
        - "Products"
      summary: "Delete a single category from category list."
      description: "Delete a single category from category list."
      responses:
        200:
          description: "Successfully deleted category."
      requestBody:
        content:
          application/json:
            schema:
              type: "object"
              properties:
                id:
                  type: "integer"
  /product/category-list:
    get:
      tags:
        - "Products"
      summary: "Get all categories in system"
      parameters:
        - name: "id"
          in: "query"
          description: "This is the category id of the category we are fetching from a database. This is for multi-category use case."
          schema:
            type: "integer"
        - name: "count"
          in: "query"
          description: "Fetch categories by a defined limit or count"
          schema:
            type: "integer"
        - name: "last_item_id"
          in: "query"
          description: "Returns an array of data with less than the last row id passed. If not passed,it defaults to zero"
          schema:
            type: "integer"
        - name: "select_all"
          in: "query"
          description: "This is returns all categories assigned to the database."
          schema:
            type: "integer"
        - name: "sort_order"
          in: "query"
          description: "Change the order in which data is returned either ascending or descending"
          schema:
            type: "string"
      responses:
        200:
          description: "Successfully fetched all categories from database for two"
components: {}
tags: []
